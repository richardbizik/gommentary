// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package handlers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYX2/bNhD/KgS3hxbwbLXJ9uC3bg2yYEAb1H3L8sBIJ5uFSKrkKY0X+LsPR1J/LMl2",
	"FsTpivaNFsm73/35He98z1OjSqNBo+Pze+7SFSjhl38YpUAjLUtrSrAowW+IClfG0ioDl1pZojSaz/kb",
	"/52ZnOEKWBquT/mE47oEPucOrdRLvpnwTCAM778VCOzLCnR9l30RjqUWBEJGcnJjlUA+9/d/QalgTDhk",
	"MtiyLf1dpW7Ao/MHWGY0MDQ7sEqNsARL8mQ2FPaxvcRkNmpjaZwMp/uXL+NOz1NMamahLNaskG4HFtqP",
	"UdhlXTzyINMQ7nDEOLjDw1H0aD5X0kLG51fkpRjXKLbjgRZ3HZ3rRpy5+QQpEpiYb39Kh8auh2l31KR5",
	"Qk90nXDYzkux9FaJonif8/lV3+q0ZeHPFnI+5z/NWsrOIl9nUehCqrIA0pIajfGeRFDugQJq728a4MJa",
	"sR4YWcNqFY2Yul+jt3yzx0PRmG+t/jyyXhyTi3uc7A4n4KMSaZhBE+6qoP2AhEU81jervn6cnPNh3vnm",
	"Rd3vhBpJHPpaB6kF+fgIHwzwzqCeZRJ32vAc+q0NzOznUDbiNn+Y0d4oIRQ4F3Ozx3OWAQpZQMbimRo/",
	"kMRRYQ5uwUpcj0jTDO5S8D9ZWgjnmNSZTAVKvfRSTZpW1kK2U3w/T2tdrQ2T4IIxl9X82/ZYLq3zwYrn",
	"b4wpQGi6UIhdO07+A52d7kNvUBRnBai6z2tKmdT42+l4c0B3CJ0bk9mzOeCN4CKSvtotkWOuWLT1Ydsb",
	"YyX1IutRjuFK4FZDdQOF0UtqhUZzQj+UzP9R8rAaD431KZlWlCYLqk3BzhsQFiy9Y00v7kPsP7eKVogl",
	"35AMqXMzNGEB9lamZEUOBIkJ9uFs8ZG9ubxguadcKP0eu0R6Y/l5+CYspe0tWBdEJdNX04ScZUrQopR8",
	"zk+myfSE2juBK496FuXN7uNi4yMoMPVmUCAFIbvIiPSdCkUyrFCAYJ1/eSSpJLm8jk6n0Wh9iraCSRxV",
	"OrnZ+P86HAaHv5ts3XvERFkWnt1Gzz650J+3ovY9Hl3om+0oEyL/wZVGuxDM10nyZKp77R0p3w75+78o",
	"SKdPqDKU8j2qTp9L1a/PZZVvUZQiDoREbR5E2hqm+WzVzipLwGGynwP2+upjpfykXwM+AFZWMyXupKoU",
	"FbS/qyQ5SQupJPolMN0MjRnkUvthzU3ZW8hFVSB7nVCB8AA/V+DBR4SxvLdwoho+f5UkE66kjr8mI+/G",
	"YBzuPOB1ZaLp1QJaCbfAXjgUFh0TyJKXuyCV4ZkdeKhVfH18fnZnuu+KpFvMOYeGOKxmiCdQfE5n93Gx",
	"mXWm2wMECnPKQ+jTduA/6PNt0cf9IA4TrIwBrYMZ/0wcYcf2zHosbhypm9oG/3X6qf9Frn2d9ia4n4mm",
	"UqNpxp0XMm/W0jGhDa6gGRvY2lQsFTr+M8Y0OISsSdeX06C/Hm98KnYHm6vrzfXm3wAAAP//GmlKvHgY",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
