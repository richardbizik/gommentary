// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package handlers

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Edit comment
	// (PATCH /comment/{comment})
	EditComment(w http.ResponseWriter, r *http.Request, comment string)
	// Get comment history
	// (GET /comment/{comment}/history)
	GetCommentHistory(w http.ResponseWriter, r *http.Request, comment string, params GetCommentHistoryParams)
	// Get a page of comments
	// (GET /subject/{subject}/comment)
	GetCommentsPage(w http.ResponseWriter, r *http.Request, subject string, params GetCommentsPageParams)
	// Create a comment to subject (if subject is another comment you can create nested comments).
	// (POST /subject/{subject}/comment)
	CreateComment(w http.ResponseWriter, r *http.Request, subject string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Edit comment
// (PATCH /comment/{comment})
func (_ Unimplemented) EditComment(w http.ResponseWriter, r *http.Request, comment string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get comment history
// (GET /comment/{comment}/history)
func (_ Unimplemented) GetCommentHistory(w http.ResponseWriter, r *http.Request, comment string, params GetCommentHistoryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a page of comments
// (GET /subject/{subject}/comment)
func (_ Unimplemented) GetCommentsPage(w http.ResponseWriter, r *http.Request, subject string, params GetCommentsPageParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a comment to subject (if subject is another comment you can create nested comments).
// (POST /subject/{subject}/comment)
func (_ Unimplemented) CreateComment(w http.ResponseWriter, r *http.Request, subject string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// EditComment operation middleware
func (siw *ServerInterfaceWrapper) EditComment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "comment" -------------
	var comment string

	err = runtime.BindStyledParameterWithOptions("simple", "comment", chi.URLParam(r, "comment"), &comment, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "comment", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.EditComment(w, r, comment)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCommentHistory operation middleware
func (siw *ServerInterfaceWrapper) GetCommentHistory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "comment" -------------
	var comment string

	err = runtime.BindStyledParameterWithOptions("simple", "comment", chi.URLParam(r, "comment"), &comment, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "comment", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCommentHistoryParams

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCommentHistory(w, r, comment, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCommentsPage operation middleware
func (siw *ServerInterfaceWrapper) GetCommentsPage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subject" -------------
	var subject string

	err = runtime.BindStyledParameterWithOptions("simple", "subject", chi.URLParam(r, "subject"), &subject, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCommentsPageParams

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCommentsPage(w, r, subject, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateComment operation middleware
func (siw *ServerInterfaceWrapper) CreateComment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subject" -------------
	var subject string

	err = runtime.BindStyledParameterWithOptions("simple", "subject", chi.URLParam(r, "subject"), &subject, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateComment(w, r, subject)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/comment/{comment}", wrapper.EditComment)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/comment/{comment}/history", wrapper.GetCommentHistory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/subject/{subject}/comment", wrapper.GetCommentsPage)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/subject/{subject}/comment", wrapper.CreateComment)
	})

	return r
}

type EditCommentRequestObject struct {
	Comment string `json:"comment"`
	Body    *EditCommentJSONRequestBody
}

type EditCommentResponseObject interface {
	VisitEditCommentResponse(w http.ResponseWriter) error
}

type EditComment200JSONResponse CommentSimple

func (response EditComment200JSONResponse) VisitEditCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EditComment400JSONResponse Error

func (response EditComment400JSONResponse) VisitEditCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type EditComment404JSONResponse Error

func (response EditComment404JSONResponse) VisitEditCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type EditComment500JSONResponse Error

func (response EditComment500JSONResponse) VisitEditCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCommentHistoryRequestObject struct {
	Comment string `json:"comment"`
	Params  GetCommentHistoryParams
}

type GetCommentHistoryResponseObject interface {
	VisitGetCommentHistoryResponse(w http.ResponseWriter) error
}

type GetCommentHistory200JSONResponse CommentHistoryPage

func (response GetCommentHistory200JSONResponse) VisitGetCommentHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCommentHistory400JSONResponse Error

func (response GetCommentHistory400JSONResponse) VisitGetCommentHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCommentHistory404JSONResponse Error

func (response GetCommentHistory404JSONResponse) VisitGetCommentHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCommentsPageRequestObject struct {
	Subject string `json:"subject"`
	Params  GetCommentsPageParams
}

type GetCommentsPageResponseObject interface {
	VisitGetCommentsPageResponse(w http.ResponseWriter) error
}

type GetCommentsPage200JSONResponse CommentsPage

func (response GetCommentsPage200JSONResponse) VisitGetCommentsPageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCommentsPage400JSONResponse Error

func (response GetCommentsPage400JSONResponse) VisitGetCommentsPageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCommentsPage404JSONResponse Error

func (response GetCommentsPage404JSONResponse) VisitGetCommentsPageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateCommentRequestObject struct {
	Subject string `json:"subject"`
	Body    *CreateCommentJSONRequestBody
}

type CreateCommentResponseObject interface {
	VisitCreateCommentResponse(w http.ResponseWriter) error
}

type CreateComment200JSONResponse Comment

func (response CreateComment200JSONResponse) VisitCreateCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateComment400JSONResponse Error

func (response CreateComment400JSONResponse) VisitCreateCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateComment500JSONResponse Error

func (response CreateComment500JSONResponse) VisitCreateCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Edit comment
	// (PATCH /comment/{comment})
	EditComment(ctx context.Context, request EditCommentRequestObject) (EditCommentResponseObject, error)
	// Get comment history
	// (GET /comment/{comment}/history)
	GetCommentHistory(ctx context.Context, request GetCommentHistoryRequestObject) (GetCommentHistoryResponseObject, error)
	// Get a page of comments
	// (GET /subject/{subject}/comment)
	GetCommentsPage(ctx context.Context, request GetCommentsPageRequestObject) (GetCommentsPageResponseObject, error)
	// Create a comment to subject (if subject is another comment you can create nested comments).
	// (POST /subject/{subject}/comment)
	CreateComment(ctx context.Context, request CreateCommentRequestObject) (CreateCommentResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// EditComment operation middleware
func (sh *strictHandler) EditComment(w http.ResponseWriter, r *http.Request, comment string) {
	var request EditCommentRequestObject

	request.Comment = comment

	var body EditCommentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.EditComment(ctx, request.(EditCommentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EditComment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(EditCommentResponseObject); ok {
		if err := validResponse.VisitEditCommentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCommentHistory operation middleware
func (sh *strictHandler) GetCommentHistory(w http.ResponseWriter, r *http.Request, comment string, params GetCommentHistoryParams) {
	var request GetCommentHistoryRequestObject

	request.Comment = comment
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCommentHistory(ctx, request.(GetCommentHistoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCommentHistory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCommentHistoryResponseObject); ok {
		if err := validResponse.VisitGetCommentHistoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCommentsPage operation middleware
func (sh *strictHandler) GetCommentsPage(w http.ResponseWriter, r *http.Request, subject string, params GetCommentsPageParams) {
	var request GetCommentsPageRequestObject

	request.Subject = subject
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCommentsPage(ctx, request.(GetCommentsPageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCommentsPage")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCommentsPageResponseObject); ok {
		if err := validResponse.VisitGetCommentsPageResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateComment operation middleware
func (sh *strictHandler) CreateComment(w http.ResponseWriter, r *http.Request, subject string) {
	var request CreateCommentRequestObject

	request.Subject = subject

	var body CreateCommentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateComment(ctx, request.(CreateCommentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateComment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateCommentResponseObject); ok {
		if err := validResponse.VisitCreateCommentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
