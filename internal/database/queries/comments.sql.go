// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: comments.sql

package queries

import (
	"context"
	"database/sql"
	"time"
)

const countComments = `-- name: CountComments :one
SELECT
    count(*)
FROM
    comment
WHERE
    subject = ?1
`

func (q *Queries) CountComments(ctx context.Context, subject string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countComments, subject)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createComment = `-- name: CreateComment :one
INSERT INTO comment (id, subject, author, text, date, position)
    VALUES (?1, ?2, ?3, ?4, CURRENT_TIMESTAMP, (
            SELECT
                coalesce(max(position) + 1, 1)
            FROM
                comment
            WHERE
                subject = ?2))
RETURNING
    id, position, subject, author, date, text
`

type CreateCommentParams struct {
	ID      string
	Subject string
	Author  sql.NullString
	Text    string
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment,
		arg.ID,
		arg.Subject,
		arg.Author,
		arg.Text,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Position,
		&i.Subject,
		&i.Author,
		&i.Date,
		&i.Text,
	)
	return i, err
}

const getComment = `-- name: GetComment :one
SELECT
    id, position, subject, author, date, text
FROM
    comment
WHERE
    id = ?1
`

func (q *Queries) GetComment(ctx context.Context, id string) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Position,
		&i.Subject,
		&i.Author,
		&i.Date,
		&i.Text,
	)
	return i, err
}

const getComments = `-- name: GetComments :many
SELECT
    c.id, c.position, c.subject, c.author, c.date, c.text,
    (
        SELECT
            count(*)
        FROM
            comment AS i
        WHERE
            i.subject = c.id) AS replies,
    (
        SELECT
            count(*)
        FROM
            comment_edit
        WHERE
            comment_edit.comment = c.id) AS edits
FROM
    comment AS c
WHERE
    c.subject = ?1
ORDER BY
    position ASC
LIMIT ?3 OFFSET ?2
`

type GetCommentsParams struct {
	Subject string
	POffset int64
	PLimit  int64
}

type GetCommentsRow struct {
	ID       string
	Position int64
	Subject  string
	Author   sql.NullString
	Date     time.Time
	Text     string
	Replies  int64
	Edits    int64
}

func (q *Queries) GetComments(ctx context.Context, arg GetCommentsParams) ([]GetCommentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getComments, arg.Subject, arg.POffset, arg.PLimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCommentsRow
	for rows.Next() {
		var i GetCommentsRow
		if err := rows.Scan(
			&i.ID,
			&i.Position,
			&i.Subject,
			&i.Author,
			&i.Date,
			&i.Text,
			&i.Replies,
			&i.Edits,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComment = `-- name: UpdateComment :one
UPDATE
    comment
SET
    text = ?1
WHERE
    id = ?2
RETURNING
    id, position, subject, author, date, text
`

type UpdateCommentParams struct {
	NewText string
	ID      string
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, updateComment, arg.NewText, arg.ID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Position,
		&i.Subject,
		&i.Author,
		&i.Date,
		&i.Text,
	)
	return i, err
}
