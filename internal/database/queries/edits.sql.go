// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: edits.sql

package queries

import (
	"context"
)

const countEdits = `-- name: CountEdits :one
SELECT
    count(*)
FROM
    comment_edit
WHERE
    comment = ?1
`

func (q *Queries) CountEdits(ctx context.Context, id string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countEdits, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createEdit = `-- name: CreateEdit :one
INSERT INTO comment_edit (comment, date, old_text)
    VALUES (?1, CURRENT_TIMESTAMP, ?2)
RETURNING
    comment, date, old_text
`

type CreateEditParams struct {
	ID   string
	Text string
}

func (q *Queries) CreateEdit(ctx context.Context, arg CreateEditParams) (CommentEdit, error) {
	row := q.db.QueryRowContext(ctx, createEdit, arg.ID, arg.Text)
	var i CommentEdit
	err := row.Scan(&i.Comment, &i.Date, &i.OldText)
	return i, err
}

const getEdits = `-- name: GetEdits :many
SELECT
    comment, date, old_text
FROM
    comment_edit
WHERE
    comment = ?1
ORDER BY
    date DESC
LIMIT ?3 OFFSET ?2
`

type GetEditsParams struct {
	ID      string
	POffset int64
	PLimit  int64
}

func (q *Queries) GetEdits(ctx context.Context, arg GetEditsParams) ([]CommentEdit, error) {
	rows, err := q.db.QueryContext(ctx, getEdits, arg.ID, arg.POffset, arg.PLimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CommentEdit
	for rows.Next() {
		var i CommentEdit
		if err := rows.Scan(&i.Comment, &i.Date, &i.OldText); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
